// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: discount_offer.sql

package db

import (
	"context"
)

const createDiscountOffer = `-- name: CreateDiscountOffer :one
INSERT INTO discount_offers(
    service_id
) VALUES (
    $1
) RETURNING id, service_id, created_at, expired_at
`

func (q *Queries) CreateDiscountOffer(ctx context.Context, serviceID int64) (DiscountOffer, error) {
	row := q.db.QueryRowContext(ctx, createDiscountOffer, serviceID)
	var i DiscountOffer
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const deleteDiscountOffer = `-- name: DeleteDiscountOffer :exec
DELETE FROM discount_offers
WHERE id = $1
`

func (q *Queries) DeleteDiscountOffer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDiscountOffer, id)
	return err
}

const getDiscountOffer = `-- name: GetDiscountOffer :one
SELECT id, service_id, created_at, expired_at FROM discount_offers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDiscountOffer(ctx context.Context, id int64) (DiscountOffer, error) {
	row := q.db.QueryRowContext(ctx, getDiscountOffer, id)
	var i DiscountOffer
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const listDiscountOffers = `-- name: ListDiscountOffers :many
SELECT id, service_id, created_at, expired_at FROM discount_offers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListDiscountOffersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDiscountOffers(ctx context.Context, arg ListDiscountOffersParams) ([]DiscountOffer, error) {
	rows, err := q.db.QueryContext(ctx, listDiscountOffers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DiscountOffer{}
	for rows.Next() {
		var i DiscountOffer
		if err := rows.Scan(
			&i.ID,
			&i.ServiceID,
			&i.CreatedAt,
			&i.ExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
