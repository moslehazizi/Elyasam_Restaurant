// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: comment.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments(
    comment_content,
    service_id
) VALUES (
    $1, $2
) RETURNING id, comment_content, service_id, created_at
`

type CreateCommentParams struct {
	CommentContent string `json:"comment_content"`
	ServiceID      int64  `json:"service_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.CommentContent, arg.ServiceID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CommentContent,
		&i.ServiceID,
		&i.CreatedAt,
	)
	return i, err
}

const getComment = `-- name: GetComment :one
SELECT id, comment_content, service_id, created_at FROM comments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CommentContent,
		&i.ServiceID,
		&i.CreatedAt,
	)
	return i, err
}

const listComments = `-- name: ListComments :many
SELECT id, comment_content, service_id, created_at FROM comments
WHERE 
    service_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListCommentsParams struct {
	ServiceID int64 `json:"service_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListComments(ctx context.Context, arg ListCommentsParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listComments, arg.ServiceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CommentContent,
			&i.ServiceID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
