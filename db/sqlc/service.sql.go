// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: service.sql

package db

import (
	"context"
)

const createService = `-- name: CreateService :one
INSERT INTO services(
    service_image,
    service_title,
    service_category,
    recipe,
    price
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, service_image, service_title, service_category, star, recipe, price
`

type CreateServiceParams struct {
	ServiceImage    []byte `json:"service_image"`
	ServiceTitle    string `json:"service_title"`
	ServiceCategory int64  `json:"service_category"`
	Recipe          string `json:"recipe"`
	Price           int64  `json:"price"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, createService,
		arg.ServiceImage,
		arg.ServiceTitle,
		arg.ServiceCategory,
		arg.Recipe,
		arg.Price,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.ServiceImage,
		&i.ServiceTitle,
		&i.ServiceCategory,
		&i.Star,
		&i.Recipe,
		&i.Price,
	)
	return i, err
}

const getService = `-- name: GetService :one
SELECT id, service_image, service_title, service_category, star, recipe, price FROM services
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetService(ctx context.Context, id int64) (Service, error) {
	row := q.db.QueryRowContext(ctx, getService, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.ServiceImage,
		&i.ServiceTitle,
		&i.ServiceCategory,
		&i.Star,
		&i.Recipe,
		&i.Price,
	)
	return i, err
}
