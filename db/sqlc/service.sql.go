// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: service.sql

package db

import (
	"context"
)

const createService = `-- name: CreateService :one
INSERT INTO services(
    service_image,
    service_title,
    service_category,
    recipe,
    price
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, service_image, service_title, service_category, star, recipe, price
`

type CreateServiceParams struct {
	ServiceImage    string `json:"service_image"`
	ServiceTitle    string `json:"service_title"`
	ServiceCategory int64  `json:"service_category"`
	Recipe          string `json:"recipe"`
	Price           int64  `json:"price"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, createService,
		arg.ServiceImage,
		arg.ServiceTitle,
		arg.ServiceCategory,
		arg.Recipe,
		arg.Price,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.ServiceImage,
		&i.ServiceTitle,
		&i.ServiceCategory,
		&i.Star,
		&i.Recipe,
		&i.Price,
	)
	return i, err
}

const getService = `-- name: GetService :one
SELECT id, service_image, service_title, service_category, star, recipe, price FROM services
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetService(ctx context.Context, id int64) (Service, error) {
	row := q.db.QueryRowContext(ctx, getService, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.ServiceImage,
		&i.ServiceTitle,
		&i.ServiceCategory,
		&i.Star,
		&i.Recipe,
		&i.Price,
	)
	return i, err
}

const listServices = `-- name: ListServices :many
SELECT id, service_image, service_title, service_category, star, recipe, price FROM services
WHERE
    service_category = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListServicesParams struct {
	ServiceCategory int64 `json:"service_category"`
	Limit           int32 `json:"limit"`
	Offset          int32 `json:"offset"`
}

func (q *Queries) ListServices(ctx context.Context, arg ListServicesParams) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServices, arg.ServiceCategory, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.ServiceImage,
			&i.ServiceTitle,
			&i.ServiceCategory,
			&i.Star,
			&i.Recipe,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServicesById = `-- name: ListServicesById :many
SELECT id, service_image, service_title, service_category, star, recipe, price FROM services
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListServicesByIdParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListServicesById(ctx context.Context, arg ListServicesByIdParams) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServicesById, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.ServiceImage,
			&i.ServiceTitle,
			&i.ServiceCategory,
			&i.Star,
			&i.Recipe,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateService = `-- name: UpdateService :one
UPDATE services
    set service_image = $2,
        service_title = $3,
        recipe = $4,
        price = $5
WHERE id = $1
RETURNING id, service_image, service_title, service_category, star, recipe, price
`

type UpdateServiceParams struct {
	ID           int64  `json:"id"`
	ServiceImage string `json:"service_image"`
	ServiceTitle string `json:"service_title"`
	Recipe       string `json:"recipe"`
	Price        int64  `json:"price"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, updateService,
		arg.ID,
		arg.ServiceImage,
		arg.ServiceTitle,
		arg.Recipe,
		arg.Price,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.ServiceImage,
		&i.ServiceTitle,
		&i.ServiceCategory,
		&i.Star,
		&i.Recipe,
		&i.Price,
	)
	return i, err
}
